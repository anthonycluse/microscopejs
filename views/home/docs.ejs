<style type="text/css">
    ol li{margin-bottom: 10px;}
    pre{background-color: #F8F8F8; padding:2px; border:1px solid #CCCCCC;}
</style>

<div style="text-align:center">
  <h1>microscope framework - MVC nodejs framework inspired by ASP MVC !</h1>
  <h3>Convention over configuration - MVC pattern - Scaffolding engine - Mobile views - Authentication - Sequelize ORM</h3>
</div>

<h2>Summary</h2>
<ul>
    <li><a href="#gettingstarted">Getting started</a></li>
    <li><a href="#model">Model</a></li>
    <li><a href="#controller">Controller</a></li>
    <li><a href="#views">Views</a></li>
    <li><a href="#generators">Generators</a></li>
    <li><a href="#services">Services</a></li>
    <li><a href="#authentication">Authentication - membership</a></li>
    <li><a href="#bootstrap">microscope bootstrap</a></li>
</ul>

<h2 id="gettingstarted">Getting started</h2>
  <p>
      <ol>
          <li>
              install <a href="http://nodejs.org/">Node.js</a><br>
              <pre>sudo apt-get install nodejs npm</pre>
            </li>

          <li>
              Create a new mysql database.
          </li>

          <li>
              open a terminal at the root of microscopejs folder.
          </li>

          <li>
              run the following command : <br>
              <pre>node microscope.js docs</pre>to display basic commands documentation.
          </li>

          <li>
              open <b>'./configs/database.json'</b> and set your database configuration.
          </li>

          <li>
              run the following commands : <pre>node microscope.js db_sync</pre> to synchronize microscope with your database. <br>
              You have now a new table call user (for enable authentication) in your database.
          </li>

          <li>
              Now you can create entities with complete crud views, mobile views, and web api restfull. <br>
              For example run the following command : <br>
              <pre>node microscope.js generate_crud --api --mobile article title:string content:text</pre>
              This command generate for you a Controller, an ApiController, a Service class, all CRUD views (and jQueryMobile views) for a model
              article with properties : title (string) and content(text).
          </li>

          <li>
              Now go to <b>'./middleware/routing'</b> and register routing for article by adding in module dependencies :<br>
              <pre>var ArticleController = require('../controllers/articleController');</pre>
              And in registerRoutes function : <br>
              <pre>var articleController = new ArticleController(app);</pre> 
          </li>

          <li>
              run again : <pre>node microscope.js db_sync</pre>
              to synchronize your model (user + article) with your database. <br><br>
          </li>

          <li>
              Run your microscope application : <pre>node server.js</pre>
              and visit : <a href="http://localhost:3000/">your home page</a>  or <a href="http://localhost:3000/article">http://localhost:3000/article</a>
          </li>

          <li>
              Enjoy microscope framework.
          </li> 
      </ol>

  </p>
    
<h2 id="model">Model</h2>
  <p>
      microscope.js framework use <a href="http://www.sequelizejs.com/documentation#models-definition">Sequelize ORM</a>.
      <br>
      Here is a sample sequelize model (user):
      <pre>
          module.exports = function (Sequelize, sequelize) {

              var user = sequelize.define('user', {
                  username: Sequelize.STRING,
                  email: Sequelize.STRING,
                  password: Sequelize.STRING
              });
              return user;
          }
      </pre>
  </p>

<h2 id="controller">Controller</h2>
  <p>
      Microscope framework use MVC pattern. You can create microscope controller like the following sample :
      <pre>
          /**
          * Sample controller class
          */
          var SampleController = module.exports = (function () {

              /**
              * @param {app} - express app.
              */
              function SampleController(app) {
                  this.app = app;
                  this.actions(this.app);
              }

              /**
              * Sample Controller actions.
              * @param {app}
              */
              SampleController.prototype.actions = function (app) {

                  //[httpget]
                  app.get('/sample', function (req, res) {
                      res.render('home/index');
                  });

                  //[httpget]
                  app.get('/sample/docs', function (req, res) {
                      res.render('home/docs');
                  });
              };

              return SampleController;
          })();
      </pre>

      You have just to enable your new controller in <b>./middleware/routing.js</b>
      <br>
      Module dependencies :
      <pre>
          var SampleController = require('../controllers/sampleController');
      </pre>

      Instantiate it in registerRoutes function:
      <pre>
          var sampleController = new SampleController(app);
      </pre>
  </p>

<h2 id="views">Views</h2>
  <p>
      Microscope framework use <a href="http://embeddedjs.com/">EJS view engine</a>. I waiting for <a href="https://github.com/elmerbulthuis/jshtml">razor JSHTML view engine</a> full compatibility with express3.
  </p>

<h2 id="generators">Generators</h2>
  <p>generators docs here</p>

<h2 id="services">Services</h2>
  <p>services docs here</p>

<h2 id="authentication">Authentication - membership</h2>
  <p>authentication with passportjs docs here</p>

<h2 id="bootstrap">microscope bootstrap</h2>
  <p>bhtz bootstrap docs here</p>