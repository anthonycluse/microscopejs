<style type="text/css">
    .bs-docs-sidenav.affix {
        top: 100px;
    }
</style>

  <div class="span3">
      <ul class="nav nav-list bs-docs-sidenav affix">
          <li><a href="#gettingstarted">Getting started</a></li>
          <li><a href="#model">Model</a></li>
          <li><a href="#controller">Controller</a></li>
          <li><a href="#views">Views</a></li>
          <li><a href="#generators">Generators</a></li>
          <li><a href="#services">Services</a></li>
          <li><a href="#authentication">Authentication - membership</a></li>
      </ul>
  </div>

  <div class="span9">

      <h3 class="text-info">Convention over configuration - MVC pattern - Scaffolding engine - Mobile views - Authentication - Sequelize ORM</h3>

        <h3 id="gettingstarted">Getting started</h3>
        <p>
            <ol>
                <li>
                    install <a href="http://nodejs.org/">Node.js</a><br>
                    <pre>sudo apt-get install nodejs npm</pre>
                  </li>

                <li>
                    Create a new mysql database.
                </li>

                <li>
                    open a terminal at the root of microscopejs folder.
                </li>

                <li>
                    run the following command : <br>
                    <pre>node microscope.js docs</pre>to display basic commands documentation.
                </li>

                <li>
                    open <b>'./configs/database.json'</b> and set your database configuration.
                </li>

                <li>
                    run the following commands : <pre>node microscope.js db_sync</pre> to synchronize microscope model with your database. <br>
                    You have now a new table call user (for enable authentication) in your database.
                </li>

                <li>
                    Now you can create entities with complete crud views, mobile views, and web api restfull. <br>
                    For example run the following command : <br>
                    <pre>node microscope.js generate_crud --api --mobile article title:string content:text</pre>
                    This command generate for you a Controller, an ApiController, a Service layer, all CRUD views (and jQueryMobile views) for a model
                    article with properties : title (string) and content(text).<br>
                    Go to <b>./models/dbContext.js</b> and add article to your dbContext properties like this :
                    <pre>this.article = require('./article')(Sequelize, this.sequelize);</pre>
                </li>

                <li>
                    run again : <pre>node microscope.js db_sync</pre>
                    to synchronize your model (user + article) with your database. <br><br>
                </li>

                <li>
                    Run your microscope application : <pre>node app.js</pre>
                    and visit : <a href="http://localhost:3000/">your home page</a>  or <a href="http://localhost:3000/article">http://localhost:3000/article</a>
                </li>

                <li>
                    Enjoy microscope framework.
                </li> 
            </ol>

        </p>
          
      <h3 id="model">Model</h3>
        <p>
            microscope.js framework use <a href="http://www.sequelizejs.com/documentation#models-definition">Sequelize ORM</a>.
            <br>
            Here is a sample sequelize model (user):
            <pre>
                module.exports = function (Sequelize, sequelize) {

                    var user = sequelize.define('user', {
                        username: Sequelize.STRING,
                        email: Sequelize.STRING,
                        password: Sequelize.STRING
                    });
                    return user;
                }
            </pre>
        </p>

      <h3 id="controller">Controller</h3>
        <p>
            Microscope framework use MVC pattern. You can create microscope controller like the following sample :
            <pre>
                /**
                * Module dependencies.
                */
                var MembershipFilters = require('../middleware/membershipFilters')
                    UserService = require('../services/userService');

                /**
                * Home controller class
                */
                var HomeController = module.exports = (function () {

                    /**
                    * Attributes.
                    */
                    var userService = new UserService();
                    var filters = new MembershipFilters();

                    /**
                    * Constructor.
                    * @param {app} - express app.
                    */
                    function HomeController(app) {
                        this.routes(app);
                    }

                    /**
                    * HomeController routing.
                    */
                    HomeController.prototype.routes = function(app) {
                        app.get('/', this.index);
                        app.get('/home/docs', this.docs);
                    };

                    /**
                    * [HttpGet].
                    * HomeController Index action.
                    */
                    HomeController.prototype.index = function(req, res) {
                        res.render('home/index');
                    };

                    /**
                    * [HttpGet].
                    * HomeController docs action.
                    */
                    HomeController.prototype.docs = function(req, res) {
                        res.render('home/docs');
                    };

                    return HomeController;
                })();
            </pre>
        </p>

      <h3 id="views">Views</h3>
        <p>
            Microscope framework use <a href="http://embeddedjs.com/">EJS view engine</a>. I waiting for <a href="https://github.com/elmerbulthuis/jshtml">razor JSHTML view engine</a> full compatibility with express3.
            By convention the view folder is organized as controllers folders. One folder by controller and one file by action with the same name. <br>
            There is two layout files.
            Shared folder is use for partials view.
        </p>

      <h3 id="generators">Generators</h3>
        <p>
            generators docs here <br>
            ...
        </p>

      <h3 id="services">Services</h3>
        <p>
            microscope.js come with a service layer. <br>
            ...
        </p>

      <h3 id="authentication">Authentication - membership</h3>
        <p>
            microscope.js use passport.js module to perform authentication.
            See <a href="http://passportjs.org/">passport.js</a> documentation. <br>
            See <b>./middleware/membership.js</b>.
        </p>
  </div>